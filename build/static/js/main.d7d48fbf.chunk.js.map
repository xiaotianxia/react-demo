{"version":3,"sources":["utils/loadable.js","router/routes.js","router/index.js","pages/components/topNav/components/links.js","pages/components/topNav/TopNav.js","serviceWorker.js","index.js","App.js","utils/localStorage.js"],"names":["Loading","loader","Loadable","loading","path","name","id","uuid","component","loadable","routes","map","router","key","from","to","title","TopNav","onLogout","ls","remove","window","location","reload","className","href","height","viewBox","version","width","aria-hidden","fillRule","d","links","link","type","onClick","this","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","get","JSON","parse","localStorage","getItem","set","val","setting","arguments","Object","prototype","toString","call","slice","i","setItem","stringify","removeItem","clear"],"mappings":"wRAGA,SAASA,IACL,OAAO,wCAGI,eAACC,GACZ,OAAOC,IAAS,CACZD,SACAE,QAASH,K,iBCPF,GACX,CACII,KAAM,SACNC,KAAM,QACNC,GAAIC,MACJC,UAAWC,GAAS,kBAAM,gEAG9B,CACIL,KAAM,SACNC,KAAM,QACNC,GAAIC,MACJC,UAAWC,GAAS,kBAAM,sEAG9B,CACIL,KAAM,aACNC,KAAM,YACNC,GAAIC,MACJC,UAAWC,GAAS,kBAAM,+DAG9B,CACIL,KAAM,aACNC,KAAM,YACNC,GAAIC,MACJC,UAAWC,GAAS,kBAAM,gECzBnB,oBACX,kBAAC,IAAD,KACKC,EAAOC,KAAI,SAAAC,GAAM,OAAK,kBAAC,IAAD,CAAOC,IAAKD,EAAON,GAAIF,KAAMQ,EAAOR,KAAMI,UAAWI,EAAOJ,eACnF,kBAAC,IAAD,CAAUM,KAAK,IAAIC,GAAG,Y,wCCPf,GACX,CACIC,MAAO,QACPZ,KAAM,WAEV,CACIY,MAAO,YACPZ,KAAM,eAEV,CACIY,MAAO,YACPZ,KAAM,gB,kCCLOa,E,2MACjBC,SAAW,WACPC,IAAGC,OAAO,0BACVC,OAAOC,SAASC,U,wEAIhB,OACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,eACX,uBAAGC,KAAK,KACJ,yBAAKC,OAAO,KAAKC,QAAQ,YAAYC,QAAQ,MAAMC,MAAM,KAAKC,cAAY,QAAO,0BAAMC,SAAS,UAAUC,EAAE,gkBAGpH,yBAAKR,UAAU,gBAEPS,EAAMtB,KAAI,SAAAuB,GAAI,OACV,uBAAGT,KAAMS,EAAK9B,KAAMS,IAAKqB,EAAK9B,MAAO8B,EAAKlB,WAItD,yBAAKQ,UAAU,eACX,kBAAC,IAAD,CAAMW,KAAK,SACX,kBAAC,IAAD,CAAQA,KAAK,OAAOC,QAASC,KAAKnB,UAAlC,sB,GAvBgBoB,IAAMC,WCMtBC,QACW,cAA7BnB,OAAOC,SAASmB,UAEe,UAA7BpB,OAAOC,SAASmB,UAEhBpB,OAAOC,SAASmB,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCFD,WACX,OACI,oCACI,kBAAC,EAAD,MACA,yBAAKpB,UAAU,QACX,kBAAC,EAAD,UDHA,MAASqB,SAASC,eAAe,QD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,gCGrInB,kCAAO,IAAMjC,EAAK,CACdkC,IADc,SACVxC,GACA,OAAIA,EAAYyC,KAAKC,MAAMC,aAAaC,QAAQ5C,IACzC,IAGX6C,IANc,SAMV7C,EAAK8C,GACL,IAAMC,EAAUC,UAAU,GAC1B,GAA6D,WAAzDC,OAAOC,UAAUC,SAASC,KAAKL,GAASM,MAAM,GAAI,GAClD,IAAK,IAAMC,KAAKP,EACZJ,aAAaY,QAAQD,EAAGb,KAAKe,UAAUT,EAAQO,UAGnDX,aAAaY,QAAQvD,EAAKyC,KAAKe,UAAUV,KAIjDvC,OAjBc,SAiBPP,GACH2C,aAAac,WAAWzD,IAG5B0D,MArBc,WAsBVf,aAAae,Y","file":"static/js/main.d7d48fbf.chunk.js","sourcesContent":["import React from 'react';\nimport Loadable from 'react-loadable';\n\nfunction Loading () {\n    return <div>loading</div>\n}\n\nexport default (loader) => {\n    return Loadable({\n        loader,\n        loading: Loading,\n    });\n}","import loadable from '@utils/loadable';\nimport uuid from 'uuid';\n\nexport default [\n    {   \n        path: '/login',\n        name: 'login',\n        id: uuid(),\n        component: loadable(() => import('@/pages/login/Login')),\n    },\n\n    {\n        path: '/repos',\n        name: 'repos',\n        id: uuid(),\n        component: loadable(() => import('@/pages/repos/List')),\n    },\n\n    {\n        path: '/following',\n        name: 'following',\n        id: uuid(),\n        component: loadable(() => import('@/pages/following/List')),\n    },\n\n    {\n        path: '/followers',\n        name: 'followers',\n        id: uuid(),\n        component: loadable(() => import('@/pages/followers/List')),\n    }\n]","import React from 'react';\nimport { Route, HashRouter, Redirect } from 'react-router-dom';\nimport routes from './routes';\n\nexport default () => (\n    <HashRouter>\n        {routes.map(router => (<Route key={router.id} path={router.path} component={router.component}></Route>))}\n        <Redirect from=\"/\" to=\"login\" />\n    </HashRouter>\n)","export default [\n    {\n        title: 'repos',\n        path: '#/repos'\n    },\n    {\n        title: 'following',\n        path: '#/following'\n    },\n    {\n        title: 'followers',\n        path: '#/followers'\n    }\n]","import React from 'react';\nimport links from './components/links';\nimport './topNav.scss';\nimport { Button, Icon } from 'antd';\nimport { ls } from '@utils/localStorage';\n\nexport default class TopNav extends React.Component {\n    onLogout = () => {\n        ls.remove('my_github_app_username');\n        window.location.reload();\n    }\n\n    render() {\n        return (\n            <div className=\"topnav\">\n                <div className=\"topnav-logo\">\n                    <a href=\"/\">\n                        <svg height=\"32\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"32\" aria-hidden=\"true\"><path fillRule=\"evenodd\" d=\"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z\"></path></svg>\n                    </a>\n                </div>\n                <div className=\"topnav-links\">\n                    {\n                        links.map(link => (\n                            <a href={link.path} key={link.path}>{link.title}</a>\n                        ))\n                    }\n                </div>\n                <div className=\"topnav-user\">\n                    <Icon type=\"user\" /> \n                    <Button type=\"link\" onClick={this.onLogout}>退出</Button>\n                </div>\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@style/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\nserviceWorker.unregister();\n","import React from 'react';\nimport Router from './router';\nimport TopNav from './pages/components/topNav/TopNav';\n\nexport default function App() {\n    return (\n        <>\n            <TopNav></TopNav>\n            <div className=\"main\">\n                <Router></Router>\n            </div>\n        </>\n    );\n}","export const ls = {\n    get(key) {\n        if (key) return JSON.parse(localStorage.getItem(key));\n        return '';\n    },\n\n    set(key, val) {\n        const setting = arguments[0];\n        if (Object.prototype.toString.call(setting).slice(8, -1) === 'Object') {\n            for (const i in setting) {\n                localStorage.setItem(i, JSON.stringify(setting[i]));\n            }\n        } else {\n            localStorage.setItem(key, JSON.stringify(val));\n        }\n    },\n\n    remove(key) {\n        localStorage.removeItem(key);\n    },\n\n    clear() {\n        localStorage.clear();\n    }\n};"],"sourceRoot":""}